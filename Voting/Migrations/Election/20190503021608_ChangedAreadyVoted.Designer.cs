// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Voting.Models.DbContexts;

namespace Voting.Migrations.Election
{
    [DbContext(typeof(ElectionDbContext))]
    [Migration("20190503021608_ChangedAreadyVoted")]
    partial class ChangedAreadyVoted
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Voting.Models.AlreadyVoted", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Student");

                    b.Property<bool>("Voted");

                    b.HasKey("Id");

                    b.ToTable("AlreadyVoted");
                });

            modelBuilder.Entity("Voting.Models.Candidate", b =>
                {
                    b.Property<int>("CanId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CandidateName")
                        .HasMaxLength(20);

                    b.Property<int?>("CategoryCatId");

                    b.Property<string>("Photo");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("Year");

                    b.HasKey("CanId");

                    b.HasIndex("CategoryCatId");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("Voting.Models.Category", b =>
                {
                    b.Property<int>("CatId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .HasMaxLength(60);

                    b.Property<byte[]>("TimeSamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("CatId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Voting.Models.Votes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CandidateCanId");

                    b.Property<int?>("CategoryCatId");

                    b.Property<byte[]>("TimeStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("VoteCount");

                    b.HasKey("Id");

                    b.HasIndex("CandidateCanId");

                    b.HasIndex("CategoryCatId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("Voting.Models.Candidate", b =>
                {
                    b.HasOne("Voting.Models.Category", "Category")
                        .WithMany("Candidates")
                        .HasForeignKey("CategoryCatId");
                });

            modelBuilder.Entity("Voting.Models.Votes", b =>
                {
                    b.HasOne("Voting.Models.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateCanId");

                    b.HasOne("Voting.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryCatId");
                });
#pragma warning restore 612, 618
        }
    }
}
